%YAML 1.2
---
name: Markdown PPP
file_extensions:
  - md
  - mdown
  - markdown
  - markdn
scope: text.html.markdown.ppp
contexts:
  main:
    - include: ppp-macro
    - match: (?=(?<!\s)---(\s*coffee|\s*json)?\n$)
      push: front-matter
    - match: ""
      push: body
  front-matter:
    - include: ppp-macro
    - match: (?<!\s)---\n$
      push:
        - meta_scope: markup.raw.yaml.front-matter
        - meta_content_scope: source.yaml
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.yaml
    - match: (?<!\s)---\s*coffee\n$
      push:
        - meta_scope: markup.raw.coffee.front-matter
        - meta_content_scope: source.coffee
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.coffee
    - match: (?<!\s)---\s*json\n$
      push:
        - meta_scope: markup.raw.json.front-matter
        - meta_content_scope: source.json
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.json
    - match: ""
      pop: true
      push: body
  body:
    - include: ppp-macro
    - match: |-
        (?x)^
        (?= [ ]{,3}>
        | ([ ]{4}|\t)(?!$)
        | [#]{1,6}\s*+
        | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
        )
      comment: |
        We could also use an empty end match and set
                        applyEndPatternLast, but then we must be sure that the begin
                        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - match: |-
            (?x)^
            (?! [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          pop: true
        - include: block_quote
        - include: block_raw
        - include: heading
        - include: separator
    - match: '^[ ]{0,3}([*+-])(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.unnumbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: fenced-code-blocks
        - include: list-paragraph
    - match: '^[ ]{0,3}([0-9]+\.)(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.numbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: fenced-code-blocks
        - include: list-paragraph
    - include: fenced-code-blocks
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)(?!.*?</\1>)'
      comment: Markdown formatting is disabled inside block-level tags.
      push:
        - meta_scope: meta.disable-markdown
        - match: (?<=^</\1>$\n)
          pop: true
        - include: tag-kbd
        - include: scope:text.html.basic
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)'
      comment: Same rule but for one line disables.
      push:
        - meta_scope: meta.disable-markdown
        - match: $\n?
          pop: true
        - include: tag-kbd
        - include: scope:text.html.basic

    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(\^\d+?)(\])(:)   # Reference name
        )
      scope: meta.link.reference.footnote.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
      push:
        - match: '^(?=\S)'
          pop: true
        - include: inline
        - include: attribute-block

    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(.+?)(\])(:)    # Reference name
          [ \t]*          # Optional whitespace
          (<?)(\S+?)(>?)      # The url
          [ \t]*          # Optional whitespace
          (?:
              ((\().+?(\)))   # Match title in quotes…
            | ((").+?("))   # or in parens.
          )?            # Title is optional
        )
      scope: meta.link.reference.def.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.markdown
        8: string.other.link.description.title.markdown
        9: punctuation.definition.string.begin.markdown
        10: punctuation.definition.string.end.markdown
        11: string.other.link.description.title.markdown
        12: punctuation.definition.string.begin.markdown
        13: punctuation.definition.string.end.markdown
      push:
        - meta_scope: punctuation.separator.key-value.markdown
        - match: '^(?=\S)'
          pop: true
        - include: attribute-block

    - match: '^(?=\S)(((\\.)|[\w-])*)(:)\s(?![=-]{3,}(?=$))'
      captures:
        1: markup.captionprefix.markdown
        3: constant.character.escape.markdown
        4: punctuation.definition.constant.markdown
      push:
        - match: '^(?=[:]{3,})'
          pop: true
        - match: '^(?:\s*$|(?=[ ]{,3}>)|(?=```|~~~))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          scope: meta.paragraph.markdown
          pop: true
        - include: inline
        - include: attribute-block

    - match: '^(?=\S)(?![=-]{3,}(?=$))'
      push:
        - meta_scope: meta.paragraph.markdown
        - match: '^(?=[:]{3,})'
          pop: true
        - match: '^(?:\s*$|(?=[ ]{,3}>)|(?=```|~~~))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          pop: true
        - include: inline
        - include: scope:text.html.basic
        - match: '^(={3,})(?=[ \t]*$)'
          scope: markup.heading.1.markdown
          captures:
            1: punctuation.definition.heading.markdown
        - match: '^(-{3,})(?=[ \t]*$)'
          scope: markup.heading.2.markdown
          captures:
            1: punctuation.definition.heading.markdown

  ampersand:
    - match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)"
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-ampersand.markdown
  block_quote:
    - match: '\G[ ]{,3}(>)[ ]?'
      comment: |
        We terminate the block quote when seeing an empty line, a
                        separator or a line with leading > characters. The latter is
                        to “reset” the quote level for quoted lines.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - meta_scope: markup.quote.markdown
        - match: |-
            (?x)^
            (?= \s*$
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}>
            )
          pop: true
        - match: |-
            (?x)\G
            (?= [ ]{,3}>
            )
          push:
            - match: ^
              pop: true
            - include: block_quote
        - match: |-
            (?x)\G
            (?= ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - include: block_raw
            - include: heading
            - include: separator
            - match: ^
              pop: true
        - match: |-
            (?x)\G
            (?! $
            | [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - match: $|(?<=\n)
              pop: true
            - include: inline
            - include: scope:text.html.basic
  block_raw:
    - match: '\G([ ]{4}|\t).*$\n?'
      scope: markup.raw.block.markdown
  bold:
    - match: |-
        (?x)
          (?<!\w)(\*\*|__)(?=\S)                # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: (?<=\S)(\1)
          captures:
            1: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: italic
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  bold_italic:
    - match: |-
        (?x)
          (?<!\w)(\*|_)(?=\1\1)(\1\1)(?=\S)               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1{3}(?!\1)).           # Everything besides
                                # style closer
            )++
            (?<=\S)\1{3}(?!\1)                # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
        2: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold_italic.markdown
        - match: '(?<=\S)(\1{3})(?!\1)'
          captures:
            1: punctuation.definition.bold.markdown
            2: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: italic
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  bracket:
    - match: '<(?![a-z/?\$!])'
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-bracket.markdown
  escape:
    - match: '\\[-`*_#+.!(){}\[\]\\>]'
      scope: constant.character.escape.markdown

  ppp-macro:
    - match: '^(%)\s*([\w-]+)\s*(:)'
      captures:
        1: punctuation.definition.constant.markdown
        2: constant
        3: punctuation.definition.constant.markdown
      push:
        - match: '^(?!\s+)'
          pop: true
        - include: inline

    - match: '^(%)\s*([\w-]+)\s*'
      captures:
        1: punctuation.definition.constant.markdown
        2: constant
      push:
        - meta_scope: punctuation.definition.constant.markdown
        - match: '^(?!\s+)'
          pop: true

    - match: '^(%)'
      push:
        - meta_scope: punctuation.definition.constant.markdown
        - match: '^(?!\s+)'
          pop: true

  fenced-c:
    - match: '^(\s*[`~]{3,})(?=(c|{.*?\.(c)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.c
  fenced-csharp:
    - match: '^(\s*[`~]{3,})(?=(c(?:s|sharp)|{.*?\.(c(?:s|sharp))\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.cs
  fenced-c++:
    - match: '^(\s*[`~]{3,})(?=(cpp|{.*?\.(cpp)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.c++
  fenced-clojure:
    - match: '^(\s*[`~]{3,})(?=(clojure|{.*?\.(clojure)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.clojure

  fenced-divs-with-attr:
    - match: '^([:]{3,})(?=\s*{.*}\s*$)'
      captures:
        1: punctuation.definition.string.markdown
      push:
        - match: '(?<=:::)\s*({)'
          push:
            - meta_scope: meta.attribute.markdown
            - match: '}\s*$'
              pop: true
            - include: attributes

        - meta_scope: markup.nested.block.div.markdown
        - match: ^(\1[:]*)\n
          captures:
            1: punctuation.definition.string.markdown
          pop: true
        - include: body

  fenced-divs:
    - match: '^([:]{3,})\s*([\w-]+)?\s*([:]*)\s*$'
      captures:
        1: punctuation.definition.string.markdown
        2: meta.attribute.class.markdown
        3: punctuation.definition.string.markdown
      push:
        - meta_scope: markup.nested.block.div.markdown
        - match: ^(\1[:]*)\n
          captures:
            1: punctuation.definition.string.markdown
          pop: true
        - include: body

  fenced-go:
    - match: '^(\s*[`~]{3,})(?=(go|golang|{.*?\.(go|golang)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.go
  fenced-kotlin:
    - match: '^(\s*[`~]{3,})(?=(kt|kotlin|{.*?\.(kt|kotlin)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.Kotlin
  fenced-code-blocks:
    - include: fenced-divs-with-attr
    - include: fenced-divs
    - include: fenced-html
    - include: fenced-haskell
    - include: fenced-xml
    - include: fenced-diff
    - include: fenced-perl
    - include: fenced-php
    - include: fenced-css
    - include: fenced-less
    - include: fenced-java
    - include: fenced-c
    - include: fenced-c++
    - include: fenced-csharp
    - include: fenced-yaml
    - include: fenced-sql
    - include: fenced-stylus
    - include: fenced-shell
    - include: fenced-sass
    - include: fenced-scss
    - include: fenced-scala
    - include: fenced-obj-c
    - include: fenced-coffee
    - include: fenced-js
    - include: fenced-ts
    - include: fenced-tsx
    - include: fenced-ruby
    - include: fenced-python
    - include: fenced-lisp
    - include: fenced-lua
    - include: fenced-scheme
    - include: fenced-swift
    - include: fenced-clojure
    - include: fenced-go
    - include: fenced-kotlin
    - include: fenced-ocaml
    - include: fenced-reason
    - include: fenced-undefined
  fenced-coffee:
    - match: '^(\s*[`~]{3,})(?=(coffee|cjsx|{.*?\.(coffee|cjsx)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.coffee
  fenced-css:
    - match: '^(\s*[`~]{3,})(?=(css|{.*?\.(css)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.css
  fenced-diff:
    - match: '^(\s*[`~]{3,})(?=(diff|patch|{.*?\.(diff|patch)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.diff
  fenced-haskell:
    - match: '^(\s*[`~]{3,})(?=(hs|haskell|{.*?\.(hs|haskell)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.haskell
  fenced-html:
    - match: '^(\s*[`~]{3,})(?=(html|html5|{.*?\.(html|html5)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:text.html.basic
  fenced-java:
    - match: '^(\s*[`~]{3,})(?=(java|{.*?\.(java)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.java
  fenced-js:
    - match: '^(\s*[`~]{3,})(?=(js|jsx|json|javascript|{.*?\.(js|jsx|json|javascript)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.js
  fenced-less:
    - match: '^(\s*[`~]{3,})(?=(less|{.*?\.(less)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.less
  fenced-lisp:
    - match: '^(\s*[`~]{3,})(?=(lisp|{.*?\.(lisp)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.lisp
  fenced-lua:
    - match: '^(\s*[`~]{3,})(?=(lua|{.*?\.(lua)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.lua
  fenced-ocaml:
    - match: '^(\s*[`~]{3,})(?=(ocaml|{.*?\.(ocaml)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.ocaml
  fenced-obj-c:
    - match: '^(\s*[`~]{3,})(?=(obj-c|objective-c|{.*?\.(obj-c|objective-c)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.objc
  fenced-perl:
    - match: '^(\s*[`~]{3,})(?=(perl|{.*?\.(perl)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.perl
  fenced-php:
    - match: '^(\s*[`~]{3,})(?=(php|{.*?\.(php)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.php
  fenced-python:
    - match: '^(\s*[`~]{3,})(?=(py|python|{.*?\.(py|python)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.python
  fenced-reason:
    - match: '^(\s*[`~]{3,})(?=(re|reason|{.*?\.(re|reason)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.reason
  fenced-ruby:
    - match: '^(\s*[`~]{3,})(?=(ruby|{.*?\.(ruby)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.ruby
  fenced-sass:
    - match: '^(\s*[`~]{3,})(?=(sass|{.*?\.(sass)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.sass
  fenced-scala:
    - match: '^(\s*[`~]{3,})(?=(scala|{.*?\.(scala)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.scala
  fenced-scheme:
    - match: '^(\s*[`~]{3,})(?=(scheme|{.*?\.(scheme)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.scheme
  fenced-scss:
    - match: '^(\s*[`~]{3,})(?=(scss|{.*?\.(scss)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.scss
  fenced-shell:
    - match: '^(\s*[`~]{3,})(?=(sh|shell|bash|{.*?\.(sh|shell|bash)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.shell
  fenced-sql:
    - match: '^(\s*[`~]{3,})(?=(sql|{.*?\.(sql)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.sql
  fenced-stylus:
    - match: '^(\s*[`~]{3,})(?=(stylus|{.*?\.(stylus)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.stylus
  fenced-swift:
    - match: '^(\s*[`~]{3,})(?=(swift|{.*?\.(swift)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.swift
  fenced-ts:
    - match: '^(\s*[`~]{3,})(?=(ts|typescript|{.*?\.(ts|typescript)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.ts
  fenced-tsx:
    - match: '^(\s*[`~]{3,})(?=(tsx|{.*?\.(tsx)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.tsx
  fenced-undefined:
    - match: '^(\s*(`{3,}|~{3,}))(.*?)\s*$'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
  fenced-xml:
    - match: '^(\s*[`~]{3,})(?=(xml|{.*?\.(xml)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:text.xml
  fenced-yaml:
    - match: '^(\s*[`~]{3,})(?=(yml|yaml|{.*?\.(yml|yaml)\b.*?})\s*$)'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
        - include: scope:source.yaml

  heading:
    - match: '\G(#{1,6})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$'
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
        - include: attribute-block
  image-inline:
    - include: image-inline-with-attr
    - include: image-inline-without-attr
  image-inline-with-attr:
    - match: |-
        (?x:
                \!              # Images start with !
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(\S+?)(>?)      # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
                ([ ])?
                ({)
               )
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.image.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.markdown
        12: punctuation.definition.string.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.markdown
        15: punctuation.definition.string.markdown
        16: punctuation.definition.metadata.markdown
        17: invalid.illegal.whitespace.markdown
        18: punctuation.definition.metadata.markdown
      push:
        - match: '(})'
          captures:
            0: punctuation.definition.metadata.markdown
          pop: true
        - include: attributes
  image-inline-without-attr:
    - match: |-
        (?x:
                \!              # Images start with !
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(\S+?)(>?)      # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.image.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.image.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.markdown
        12: punctuation.definition.string.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.markdown
        15: punctuation.definition.string.markdown
        16: punctuation.definition.metadata.markdown
  image-ref:
    - match: '\!(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])'
      scope: meta.image.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  inline:
    - include: escape
    - include: ampersand
    - include: bracket
    - include: raw
    - include: latex-inline
    - include: latex-math
    - include: bold_italic
    - include: bold
    - include: italic
    - include: strikethrough
    - include: line-break
    - include: image-inline
    - include: link-inline
    - include: link-inet
    - include: link-email
    - include: bracketed-span
    - include: image-ref
    - include: link-ref
    - include: link-ref-literal
    - include: link-footnote
    - include: tag-kbd
    - include: scope:text.html.basic
  italic:
    - match: |-
        (?x)
          (?<!\w)(\*|_)(?=\S)               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | \1\1                # Must be bold closer
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.italic.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: (?<=\S)(\1)((?!\1)|(?=\1\1))
          captures:
            1: punctuation.definition.italic.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: bold
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  line-break:
    - match: " {2,}$"
      scope: meta.dummy.line-break
  link-email:
    - match: '(<)?((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)?'
      scope: meta.link.email.lt-gt.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        4: punctuation.definition.link.markdown
  link-footnote:
    - match: '(\[)(\^[^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
  link-inet:
    - match: '(<)?(\b(?:https?|ftp|file|git):///?[^\s()<>\[\]]+)(>)?'
      scope: meta.link.inet.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.link.markdown
  link-inline:
    - include: link-inline-with-attr
    - include: link-inline-without-attr
  link-inline-with-attr:
    - match: |-
        (?x:
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(.*?)(>?)     # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
                ([ ]?)
                ({)
               )
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.begin.markdown
        12: punctuation.definition.string.end.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.begin.markdown
        15: punctuation.definition.string.end.markdown
        16: punctuation.definition.metadata.markdown
        17: invalid.illegal.whitespace.markdown
        18: punctuation.definition.metadata.markdown
      push:
        - match: '(})'
          captures:
            0: punctuation.definition.metadata.markdown
          pop: true
        - include: attributes
  link-inline-without-attr:
    - match: |-
        (?x:
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(.*?)(>?)     # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.begin.markdown
        12: punctuation.definition.string.end.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.begin.markdown
        15: punctuation.definition.string.end.markdown
        16: punctuation.definition.metadata.markdown
  link-ref:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  link-ref-literal:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(?:(\[)(\]))?'
      scope: meta.link.reference.literal.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: punctuation.definition.constant.end.markdown
  bracketed-span:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])([ ])?({)'
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
      push:
        - match: '(})'
          captures:
            1: punctuation.definition.metadata.markdown
          pop: true
        - include: attributes
  list-paragraph:
    - match: \G\s+(?=\S)
      push:
        - meta_scope: meta.paragraph.list.markdown
        - match: ^\s*$
          pop: true
        - include: inline
        - match: '\G\s*([*\-+]|[0-9]+\.)\s+'
          captures:
            1: punctuation.definition.list_item.markdown
        - include: scope:text.html.basic
        - include: fenced-code-blocks
  raw:
    - include: latex-math
    - match: '(`+)((?:[^`]|(?!(?<!`)\1(?!`))`)*+)(\1)'
      scope: markup.raw.inline.markdown
      captures:
        1: punctuation.definition.raw.markdown
        2: markup.raw.inline.content.markdown
        3: punctuation.definition.raw.markdown
  separator:
    - match: '\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?'
      scope: meta.separator.markdown
  strikethrough:
    - match: |-
        (?x)
          (?<!\w)(~~)(?=[^\s~])               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
          )
      captures:
        1: punctuation.definition.strikethrough.markdown
      push:
        - meta_scope: markup.strikethrough.markdown
        - match: (?<=\S)(\1)(?!\w)
          captures:
            1: punctuation.definition.strikethrough.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: bold
        - include: italic
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  tag-kbd:
    - match: "((<)(kbd)(>))([^<]+)((</)(kbd)(>))"
      scope: markup.kbd.markdown
      captures:
        1: meta.tag.other.html
        2: punctuation.definition.tag.begin.html
        3: entity.name.tag.other.html
        4: punctuation.definition.tag.end.html
        5: markup.kbd.content.markdown
        6: meta.tag.other.html
        7: punctuation.definition.tag.begin.html
        8: entity.name.tag.other.html
        9: punctuation.definition.tag.end.html


  latex-inline:
    - include: latex-block
    - match: '(?=\\\w+)'
      push:
        - meta_scope: constant.character
        - include: scope:text.tex
        - match: '\s+'
          pop: true
  latex-block:
    - match: '(?=\\begin{(\w+)})'
      push:
        - meta_scope: constant.character
        - match: '(%.*)$'
          scope: comment.line.percentage.latex
        - include: scope:text.tex
        - match: '(?<=\\end{\1})'
          pop: true

  latex-math:
    - match: \$\$
      captures:
        0: constant.character.entity
      push:
        - include: latex-inline
        - match: \$\$
          captures:
            0: constant.character.entity
          pop: true
    - match: \$
      captures:
        0: constant.character.entity
      push:
        - include: latex-inline
        - match: \$
          captures:
            0: constant.character.entity
          pop: true

  attribute-block:
    - match: '{(?=((\\.)|[^}])*}\s*$)'
      push:
        - meta_scope: meta.attribute.markdown
        - match: '}\s*$'
          pop: true
        - include: attributes
  attributes:
    - include: attribute-id
    - include: attribute-class
    - include: attribute-double-quoted
    - include: attribute-quoted
    - include: attribute-plain
    - include: attribute-flag
    - include: attribute-illegal
  attribute-id:
    - match: '#[\w-]+'
      scope: meta.attribute.id.markdown
  attribute-class:
    - match: '\.[\w-]+'
      scope: meta.attribute.class.markdown
  attribute-double-quoted:
    - match: '([\w-]+)=("((\\.)|[^"])*")'
      captures:
        1: meta.attribute.name.markdown
        2: meta.attribute.value.markdown
  attribute-quoted:
    - match: |-
        ([\w-]+)=('((\\.)|[^'])*')
      captures:
        1: meta.attribute.name.markdown
        2: meta.attribute.value.markdown
  attribute-plain:
    - match: '([\w-]+)=([\w%-]*)'
      captures:
        1: meta.attribute.name.markdown
        2: meta.attribute.value.markdown
  attribute-flag:
    - match: '([\w-]+)(?=[\s}])'
      scope: meta.attribute.flag.markdown
  attribute-illegal:
    - match: '[^\s].*'
      scope: invalid.error
