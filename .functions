#!/bin/bash

# find / tree / search
ff() { find "${@:2}" -type f -name "$1" 2>/dev/null; }
ft() { tree -a -P "$@" --prune --dirsfirst; }
fs() { ff "$1" "${@:3}" | xargs grep "$2" -n --color=auto 2>/dev/null; }

jsf() { ff "*.js" "$@" | egrep -v "node_modules|bower_components|lib-cov|coverage|\.min"; }
jst() { ft "*.js" -I "node_modules|bower_components|lib-cov|coverage|*.min*" "$@"; }
jss() { jsf "${@:2}" | xargs egrep "$1" -n --color=auto 2>/dev/null; }

# version of ll with git prompt status for top-level git directories
# shellcheck disable=SC2012,SC2034
gl() {
  while read -r dir <&3; do
    read -r line <&4
    printf "%s" "$line"
    (
      [ -d "$dir" ] || exit
      cd "$dir" 2>/dev/null || exit
      [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || exit
      [ "$(git rev-parse --show-toplevel)" == "$(pwd)" ] || exit

      local space=" " bold="[1m" reset_bold="[22m" content git_fg
      content="$(__promptline_git)" && git_fg="[31m" || git_fg="[32m"
      __promptline_wrap "$content" "${space}${git_fg}" "[0m"
    )
    echo
  done 3< <(ls -A1 --group-directories-first) \
       4< <(ls -Ahl --group-directories-first --color=always | tail -n+2)
}

# shellcheck disable=SC2034
gt() {
  while read -r dir <&3; do
    read -r line <&4
    printf "%s" "$line"
    (
      [ -d "$dir" ] || exit
      cd "$dir" 2>/dev/null || exit
      [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || exit
      [ "$(git rev-parse --show-toplevel)" == "$(pwd)" ] || exit

      local space=" " bold="[1m" reset_bold="[22m" content git_fg
      content="$(__promptline_git)" && git_fg="[31m" || git_fg="[32m"
      __promptline_wrap "$content" "${space}${git_fg}" "[0m"
    )
    echo
  done 3< <(tree -a --dirsfirst -L $1 -f | awk '{print $NF}' | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g') \
       4< <(tree -a --dirsfirst -L $1 -C)
}

# -- Misc ---------------------------------------------------------------------

kill-tabs() { pkill -u "$USER" -f "chromium.*--type=renderer"; }

# keyload
key() {
  local keys
  for k in "$@"; do
    keys="$keys $HOME/.ssh/${k}_id"
  done
  # shellcheck disable=SC2086
  keychain --timeout $((8*60)) --quiet --host agent $keys
  # shellcheck disable=SC1090
  source ~/.keychain/agent-sh
}

# extraction
extract () {
  if [ -f "$1" ]; then
    case $1 in
      *.tar.bz2)         tar xvjf "$1"    ;;
      *.tar.gz)          tar xvzf "$1"    ;;
      *.tar.xz)          tar xJf "$1"     ;;
      *.bz2)             bunzip2 "$1"     ;;
      *.rar)             unrar x "$1"     ;;
      *.gz)              gunzip "$1"      ;;
      *.tar)             tar xvf "$1"     ;;
      *.tbz2)            tar xvjf "$1"    ;;
      *.tgz)             tar xvzf "$1"    ;;
      *.zip)             unzip "$1"       ;;
      *.sublime-package) unzip "$1"       ;;
      *.Z)               uncompress "$1"  ;;
      *.7z)              7z x "$1"        ;;
      *)                 echo "unknown extension for '$1'" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}
