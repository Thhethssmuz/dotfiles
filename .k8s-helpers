#!/bin/bash
# shellcheck disable=SC2046
# -----------------------------------------------------------------------------
# kubeconfigs and context

# Allow kubectl/kube-rs to use contexts from all kubeconfig files in ~/.kube/
export KUBECONFIG
KUBECONFIG="$( [ -d ~/.kube ] && fd . ~/.kube --max-depth 1 --type f | tr '\n' ':' || echo )"

# context switcher
kc() {
  # Relies on KUBECONFIG set to colon delimeted list of all kubeconfigs ^
  # Exclude fqdn contexts (rancher-ism).
  kubectl config use-context "$(kubectl config get-contexts -o name | grep -v fqdn | fzf)"
}

# namespace switcher
kns() {
  local -r ns="${1:-$(kubectl get ns --no-headers | choose 0 | fzf)}"
  local -r ctx="$(kubectl config current-context)"
  kubectl config set "contexts.${ctx}.namespace" "${ns}"
}

# -----------------------------------------------------------------------------
# kubernetes aliases

# kubectl
alias k="kubectl"
alias kar="kubectl api-resources"
alias ka="kubectl apply"
alias kdel="kubectl delete"
alias kg="kubectl get"
alias kgy="kubectl get -oyaml"
alias kshell="kubectl run -it --image alpine --restart Never --rm sh"
# kl - fzf kubectl logs (kl fn below)
alias kld="kl deploy"
alias kls="kl service"
alias klsts="kl sts"
alias klds="kl ds"
alias klf="kl"
alias klp="kl pod"
# kubectl get
alias kga="kg all"
alias kgp="kg pod"
alias kgcm="kg cm"
alias kgsec="kg secret"
alias kgd="kg deploy"
alias kgrs="kg rs"
alias kgj="kg job"
alias kgcj="kg cj"
alias kgs="kg service"
alias kgn="kg node"
alias kgsm="kg servicemonitor"
# kubectl describe
alias kdn="kd node"
alias kdp="kd pod"
alias kdcm="kd cm"
alias kdsec="kd secret"
alias kdd="kd deploy"
alias kdrs="kd rs"
alias kdj="kd job"
alias kdcj="kd cj"
alias kds="kd service"
alias kdsm="kd servicemonitor"
# ky - fzf kubectl yaml prettifier
alias kyp="ky pod"
alias kycm="ky cm"
alias kysec="ky secret"
alias kyd="ky deploy"
alias kyrs="ky rs"
alias kyj="ky job"
alias kycj="ky cj"
alias kysm="ky servicemonitor"
alias kys="ky service"
alias kysa="ky sa"
alias kyn="ky node"
alias kyh="ky hpa"
# kpf - fzf port-forward (see below)
alias kpf="kpfs"
# presentation mode
alias kuwuctl="kubectl"

# -----------------------------------------------------------------------------
# kubernetes interactive getters using fzf to pick unspecified args

# Pick a theme for bat because no file extension.
_YAML_BAT_THEME="DarkNeon" # good for yaml and comes with bat

# streamlined yaml viewer (tons of aliases for it in .aliases)
# usage: kg (asks for fuzzy resource, then fuzzy name)
# usage: kg pod (asks for fuzzy name of pod)
# usage: kg svc mysvc (no questions)
ky() {
  local -r resource="${1:-$(kubectl api-resources --no-headers | choose 0 | fzf)}"
  local -r name="${2:-$(kubectl get "${resource}" --no-headers | choose 0 | fzf)}"
  kubectl get "${resource}" "${name}" -oyaml | bat -l=yaml --plain --theme="${_YAML_BAT_THEME}"
}

# streamlined describe viewer operating the same way as ky
kd() {
  local -r resource="${1:-$(kubectl api-resources --no-headers | choose 0 | fzf)}"
  local -r name="${2:-$(kubectl get "${resource}" --no-headers | choose 0 | fzf)}"
  kubectl describe "${resource}" "${name}"
}

# log helper that lets you complete container name (if more than one)
kl() {
  local resource="${1:-pod}"
  local name="${2:-$(kubectl get "${resource}" --no-headers | choose 0 | fzf)}"
  if [[ "$resource" = "pod" ]]; then
    jqpth=".spec.containers"
  elif [[ "$resource" =~ (service|svc) ]]; then
    # If we are getting logs from a service we find a pod matching selectors
    local -r selectorlabels="$(kubectl get svc "${name}" -ojson | \
      jq '.spec.selector | to_entries | .[] | join("=")' -r | \
      sed ':a; N; $!ba; s/\n/,/g')"
    # overwrite name with the first pod name matching
    name="$(kubectl get pod -l "${selectorlabels}" --no-headers | head -1 | choose 0)"
    echo "Showing logs from pod/${name}"
    resource="pod"
    jqpth=".spec.containers" # pod path
  else
    # assume workload path for everything else (last category we support)
    jqpth=".spec.template.spec.containers"
  fi
  local -r data="$(kubectl get "${resource}/${name}" -ojson | jq -ca)"
  if [[ "$(jq "${jqpth} | length" <<< "${data}")" = 1 ]]; then
    container="$(jq "${jqpth}[0].name" -r <<< "${data}")" # use first container
  else
    container="$(jq "${jqpth}[].name" -r <<< "${data}" | fzf)" # user choice
  fi
  kubectl logs -f "${resource}/${name}" "${container}"
}

# port-forward to a service by selecting a ports json entry
kpfs() {
  local -r service="${1:-$(kubectl get service --no-headers | choose 0 | fzf)}"
  local -r spec="$(kubectl get service "${service}" -ojson | jq ".spec")"
  if [ "$(jq ".ports[]" -Mc <<< "${spec}" | wc -l)" -gt 1 ]; then
    portjson="$(jq ".ports[]" -Mc  <<< "${spec}" | fzf --header='pick a port object')"
  else
    portjson="$(jq ".ports[0]" -Mc <<< "${spec}")"
  fi
  local -r port="$(jq ".port" -r <<< "${portjson}")"
  echo "Forwarding to svc/${service}:${port} via local 8000"
  kubectl port-forward "svc/${service}" "8000:${port}"
}

# port-forward to a pod by selecting a ports entry from a ports entry
# will pick ports from the only container, or let you pick container by name
kpfp() {
  local -r pod="${1:-$(kubectl get pod --no-headers | choose 0 | fzf)}"
  local -r data="$(kubectl get pod "${pod}" -ojson)"
  if [[ "$(jq '.spec.containers | length' <<< "${data}")" = 1 ]]; then
    local -r cname="$(jq ".spec.containers[0].name" -r <<< "${data}")"
  else
    local -r cname="$(jq ".spec.containers[].name" -r <<< "${data}" | fzf --header='mutliple containers; please pick one')" # user choice
  fi
  local -r container="$(jq ".spec.containers[] | select(.name==\"${cname}\")" <<< "${data}")"
  if [[ "$(jq ".ports" <<< "${container}")" == "null" ]]; then
    echo "No ports for $(tput bold)${cname}$(tput sgr0) container in $(tput bold)${pod}$(tput sgr0)"
    return 1
  fi
  if [ "$(jq ".ports[]" -Mc <<< "${container}" | wc -l)" -gt 1 ]; then
    portjson="$(jq ".ports[]" -Mc <<< "${container}" | fzf --header="pick a port object")"
  else
    portjson="$(jq ".ports[0]" -Mc <<< "${cname}")"
  fi
  port="$(jq ".containerPort" -r <<< "${portjson}")"
  echo "Forwarding to pod/${pod}:${port} via local 8000"
  kubectl port-forward "${pod}" "8000:${port}"
}

# kubectl exec
ke() {
  local -r pod="${1:-$(kubectl get pod --no-headers | choose 0 | fzf)}"
  local -r data="$(kubectl get pod "${pod}" -ojson)"
  if [[ "$(jq ".spec.containers | length" <<< "${data}")" = 1 ]]; then
    container="$(jq ".spec.containers[0].name" -r <<< "${data}")" # use first container
  else
    container="$(jq ".spec.containers[].name" -r <<< "${data}" | fzf)" # user choice
  fi
  if [[ $(kubectl exec "${pod}" -itc "${container}" -- bash 2>&1) =~ "executable file not found" ]]; then
    kubectl exec "${pod}" -itc "${container}" -- sh
  fi
}

# kubectl events --for shorthand
kev() {
  local -r resource="${1:-$(kubectl api-resources --no-headers | choose 0 | fzf)}"
  local -r name="${2:-$(kubectl get "${resource}" --no-headers | choose 0 | fzf)}"
  kubectl events --for "${resource}/${name}"
}
